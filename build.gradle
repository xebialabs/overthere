/*
 * Release and publish instructions:
 *
 * Overthere can be automatically "closed" and "promoted" on maven central by calling gradle tasks
 * closeRepository, promoteRepository or closeAndPromoteRepository. Archives need to be uploaded manually.
 *
 * For example:
 * gradle clean build signArchives uploadArchives closeAndPromoteRepository
 *
 * prerequisites: Published PGP key installed and configured, authorised sonatype username and password configured
 */

import com.github.zafarkhaja.semver.Version
import nebula.plugin.release.git.opinion.Strategies
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Tag

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
        classpath "com.netflix.nebula:nebula-release-plugin:15.3.1"
        classpath "ru.vyarus:gradle-pom-plugin:2.2.2"

    }
}

// build.gradle for Overthere
plugins {
    id "com.github.hierynomus.license" version "0.16.1"
}
defaultTasks 'build'

group = 'com.xebialabs.overthere'

apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'license'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'nebula.release'

repositories {
    mavenCentral()
    maven {
        url 'https://download.java.net/maven/2/'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/releases'
    }
    maven {
        url 'https://www.libvirt.org/maven2/'
    }
    mavenLocal()
}

sourceCompatibility = '17'
targetCompatibility = '17'

configurations.all {
    exclude(group: "org.bouncycastle", module: "bcprov-jdk16")
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

if (!project.gradle.startParameter.taskNames.contains("final")) {
    release {
        grgit = Grgit.open(dir: project.projectDir)
        defaultVersionStrategy = Strategies.SNAPSHOT
        tagStrategy {
            toTagString = { vs -> "${project.name}-$vs" }
            parseTag = { Tag tag ->
                if (tag.name.startsWith(project.name)) {
                    try {
                        Version tagversion =
                                Version.valueOf(tag.name[project.name.size() + 1..-1])
                        tagversion.getMajorVersion() > 2000 ? null : tagversion
                    } catch (e) {
                        null
                    }
                } else {
                    null
                }
            }
        }
    }
}

dependencies {
    // General dependencies
    api 'nl.javadude.scannit:scannit:1.4.1'
    constraints {
        api('org.apache.commons:commons-compress:1.23.0') {
            because 'earlier versions of this transitive dependency of scannit have a vulnerability issue'
        }
    }
    api 'org.slf4j:slf4j-api:1.7.36'
    api 'org.slf4j:jcl-over-slf4j:1.7.36'

    // SSH
    api 'com.hierynomus:sshj:0.33.0'
    implementation 'com.jcraft:jzlib:1.0.7'

    // CIFS
    api 'jcifs:jcifs:1.3.17'

    // SMB2/3
    api 'com.hierynomus:smbj:0.12.1'
    api 'net.engio:mbassador:1.3.2'
    api "org.bouncycastle:bcprov-jdk15on:1.70"
    api "org.bouncycastle:bcpkix-jdk15on:1.70"

    // Telnet
    api 'commons-net:commons-net:3.9.0'

    // WinRM
    api('org.dom4j:dom4j:2.1.4') {
        exclude group: 'xml-apis', module: 'xml-apis'
    }
    api('jaxen:jaxen:2.0.0') {
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xalan', module: 'xalan'
        exclude group: 'xerces', module: 'xmlParserAPIs'
        exclude group: 'xerces', module: 'xercesImpl'
    }
    api('org.apache.httpcomponents:httpclient:4.5.13') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    api 'org.apache.httpcomponents:httpcore:4.4.14'
    api 'commons-codec:commons-codec:1.16.0'

    // GCP
    api 'com.jcraft:jsch:0.1.55'
    api 'com.google.apis:google-api-services-compute:v1-rev20221026-2.0.0'
    api 'com.google.auth:google-auth-library-oauth2-http:1.13.0'
    api 'com.google.cloud:google-cloud-os-login:2.5.0'

    // Test dependencies
    testImplementation('com.xebialabs.cloud:overcast:2.5.1') {
        exclude group: 'com.xebialabs.overthere', module: 'overthere'
        exclude group: 'net.schmizz', module: 'sshj'
    }
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'

    testImplementation('org.testng:testng:7.8.0') {
        exclude group: "junit", module: "junit"
    }
    testImplementation('nl.javadude.assumeng:assumeng:1.2.4') {
        exclude group: "junit", module: "junit"
    }
    testImplementation 'com.google.guava:guava:30.1.1-jre'

    testImplementation 'ch.qos.logback:logback-classic:1.4.8'
}

tasks.withType(Test) {
    afterSuite { descriptor, result ->
        if (descriptor.className != null) {
            def indicator = "\u001B[32m✓\u001b[0m"
            if (result.failedTestCount > 0) {
                indicator = "\u001B[31m✘\u001b[0m"
            }
            logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
        }
    }
}

test {
    useTestNG()

    exclude '**/*Itest.*'

    maxHeapSize = "512m"
}

task itest(type: Test) {
    useTestNG()

    includes = ['**/*Itest.*', '**/LocalConnectionTest.*']
    reports.junitXml.outputLocation = file("${buildDir}/itest-results")
    reports.html.outputLocation = file("${buildDir}/reports/itests")

    maxHeapSize = "512m"
    copyProjectPropertyToSystemProperty(project, systemProperties, 'itests')

    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.linux.regular.password')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.linux.regular.passphrase')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.linux.regular.privatekey')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.linux.root.password')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.linux.untrusted.password')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.linux.trusted.privatekey')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.windows.regular.password')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.windows.administrative.password')
    copyProjectPropertyToSystemProperty(project, systemProperties, 'test.overthere.windows.domain.password')

}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

license {
    header project.file('HEADER')
    ignoreFailures true
    exclude "**/ProxySocketFactory.java"
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

nexusStaging {
    packageGroup = "com.xebialabs"
}

project.tasks.register("uploadArchives") {
    group "upload"
    dependsOn publish

}

project.tasks.register("uploadArchivesToMavenLocal") {
    group "upload"
    dependsOn "publishToMavenLocal"
}

project.publishing {
    publications {
        create('deployment', MavenPublication) {
            groupId = "com.xebialabs"
            artifactId = "overthere"
            pom {
                project.gradle.projectsEvaluated {
                    name = 'Overthere'
                    description = 'Remote file manipulation and process execution framework for Java'
                    packaging 'jar'
                    url = 'https://github.com/xebialabs/overthere'
                    inceptionYear = '2011'
                }
                scm {
                    url = 'https://github.com/xebialabs/overthere'
                }
                licenses {
                    license {
                        name = 'GPLv2 with XebiaLabs FLOSS License Exception'
                        url = 'https://github.com/xebialabs/overthere/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'vpartington'
                        name = 'Vincent Partington'
                        url = 'http://www.xebialabs.com/'
                        email = 'vpartington@xebialabs.com'
                        roles = ['Developer']
                    }
                    developer {
                        id = 'hierynomus'
                        name = 'Jeroen van Erp'
                        url = 'http://www.xebialabs.com/'
                        email = 'jvanerp@xebialabs.com'
                        roles = ['Developer']
                    }
                }
            }
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            from(components["java"])
        }
    }

    if (project.hasProperty('sonatypeUsername')) {
        repositories {
            maven {
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username project.property("sonatypeUsername").toString()
                    password project.property("sonatypePassword").toString()
                }
            }
            maven {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username project.property("sonatypeUsername").toString()
                    password project.property("sonatypePassword").toString()
                }
            }
        }

        signing {
            sign(publishing.publications["deployment"])
        }
    }
}




def copyProjectPropertyToSystemProperty(project, systemProperties, name) {
    if (project.hasProperty(name)) {
        systemProperties[name] = project.getProperty(name)
    }
}

task dumpVersion {
    doLast {
        file(buildDir).mkdirs()
        def out = file("$buildDir/version.dump")
        out.write("version=$project.version")
    }
}
