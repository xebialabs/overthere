// build.gradle for Overthere
plugins {
    id "com.github.hierynomus.license" version "0.11.0"
}
defaultTasks 'build'

version = '4.2.2-SNAPSHOT'
group = 'com.xebialabs.overthere'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'license'

repositories {
  mavenCentral()
  maven {
    url 'http://download.java.net/maven/2/'
  }
  maven {
    url 'https://oss.sonatype.org/content/repositories/releases'
  }
  maven {
    url 'http://www.libvirt.org/maven2/'
  }
  mavenLocal()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations {
  compile {
    transitive = false
    exclude group: 'org.bouncycastle', module: 'bcprov-jdk16'
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

dependencies {
  // General dependencies
  compile 'nl.javadude.scannit:scannit:1.4.0'
  compile 'org.slf4j:slf4j-api:1.7.12'
  compile 'org.slf4j:jcl-over-slf4j:1.7.12'

  // SSH
  compile 'com.hierynomus:sshj:0.15.0'
  runtime 'com.jcraft:jzlib:1.0.7'
  runtime 'org.bouncycastle:bcprov-jdk15on:1.52'

  // CIFS
  compile 'jcifs:jcifs:1.3.17'

  // Telnet
  compile 'commons-net:commons-net:3.3'

  // WinRM
  compile('dom4j:dom4j:1.6.1') {
    exclude group: 'xml-apis', module: 'xml-apis'
  }
  compile('jaxen:jaxen:1.1.6') {
    exclude group: 'xml-apis', module: 'xml-apis'
    exclude group: 'xalan', module: 'xalan'
    exclude group: 'xerces', module: 'xmlParserAPIs'
    exclude group: 'xerces', module: 'xercesImpl'
  }
  compile('org.apache.httpcomponents:httpclient:4.4.1') {
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  compile 'org.apache.httpcomponents:httpcore:4.4.1'
  compile 'commons-codec:commons-codec:1.10'

  // Test dependencies
  testCompile('com.xebialabs.cloud:overcast:1.2.1') {
    exclude group: 'com.xebialabs.overthere', module: 'overthere'
    exclude group: 'net.schmizz', module: 'sshj'
  }
  testCompile 'org.hamcrest:hamcrest-core:1.2.1'
  testCompile 'org.hamcrest:hamcrest-library:1.2.1'
  testCompile 'org.mockito:mockito-core:1.8.5'
  testCompile 'org.testng:testng:5.14.10'
  testCompile 'nl.javadude.assumeng:assumeng:1.2.2'
  testCompile 'com.google.guava:guava:16.0.1'


  testRuntime 'ch.qos.logback:logback-classic:1.0.6'
}

tasks.withType(Test) {
  afterSuite { descriptor, result ->
    if (descriptor.className != null) {
      def indicator = "\u001B[32m✓\u001b[0m"
      if (result.failedTestCount > 0) {
        indicator = "\u001B[31m✘\u001b[0m"
      }
      logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
    }
  }
}

test {
  useTestNG()

  excludes = ['**/*Itest.*']

  maxHeapSize = "512m"
}

task itest(type: Test) {
  useTestNG()

  includes = ['**/*Itest.*', '**/LocalConnectionTest.*']
  reports.junitXml.destination = file("${buildDir}/itest-results")
  reports.html.destination = file("${buildDir}/reports/itests")

  maxHeapSize = "512m"
  copyProjectPropertyToSystemProperty(project, systemProperties, 'itests')
  copyProjectPropertyToSystemProperty(project, systemProperties, 'aws.endpoint')
  copyProjectPropertyToSystemProperty(project, systemProperties, 'aws.accessKey')
  copyProjectPropertyToSystemProperty(project, systemProperties, 'aws.secretKey')
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

license {
  header project.file('HEADER')
  ignoreFailures true
  exclude "**/ProxySocketFactory.java"
}

signing {
  required { gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}

uploadArchives {
  if(project.hasProperty('sonatypeUsername')) {
    repositories.mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      configuration = configurations.archives

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      pom.project {
        name 'Overthere'
        description 'Remote file manipulation and process execution framework for Java'
        packaging 'jar'
        url 'https://github.com/xebialabs/overthere'
        inceptionYear '2011'

        scm {
          url 'https://github.com/xebialabs/overthere'
        }

        licenses {
          license {
            name 'GPLv2 with XebiaLabs FLOSS License Exception'
            url 'https://github.com/xebialabs/overthere/blob/master/LICENSE'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'vpartington'
            name 'Vincent Partington'
            url 'http://www.xebialabs.com/'
            email 'vpartington@xebialabs.com'
            roles {
              role 'Developer'
            }
          }
          developer {
            id 'hierynomus'
            name 'Jeroen van Erp'
            url 'http://www.xebialabs.com/'
            email 'jvanerp@xebialabs.com'
            roles {
              role 'Developer'
            }
          }
        }
      }
    }
  }
}

def copyProjectPropertyToSystemProperty(project, systemProperties, name) {
  if(project.hasProperty(name)) {
    systemProperties[name] = project.getProperty(name)
  }
}
